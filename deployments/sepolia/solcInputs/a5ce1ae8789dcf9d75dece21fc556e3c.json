{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\ncontract FundMe{\r\n\r\n     address payable  private owner;\r\n     mapping (address=>uint256) private donations;\r\n     uint256 private donetion_count;\r\n\r\n     event Doneted(address sender,uint256 amount);\r\n     event Withdrawed(uint256 timestamp);\r\n\r\n     AggregatorV3Interface internal pricefeed;\r\n     \r\n     \r\n\r\n     constructor(address pricefeedAddress){\r\n         owner=payable(msg.sender); \r\n         donetion_count=0;\r\n          pricefeed=AggregatorV3Interface(\r\n             pricefeedAddress\r\n         );\r\n     }\r\n\r\n     function donate() external payable  {\r\n\r\n         donations[msg.sender]+=msg.value;\r\n         emit Doneted(msg.sender, msg.value);\r\n         donetion_count++;\r\n\r\n     }\r\n\r\n     modifier onlyOwner{\r\n\r\n         require(payable(msg.sender)==owner,\"You are not the owner\");\r\n         _;\r\n     }\r\n\r\n     function withdraw() external payable onlyOwner{\r\n         owner.transfer(address(this).balance);\r\n     }\r\n\r\n     function donetionCount() public view returns(uint256){\r\n         return donetion_count;\r\n     }\r\n\r\n     function getDonetions(address from) external view returns(uint256){\r\n         return donations[from];\r\n     }\r\n\r\n     function viewOwner() external view returns(address o){\r\n         o=owner;\r\n     }\r\n\r\n     function getEthtoUSD() public view returns(int256){\r\n          (\r\n            /* uint80 roundID */,\r\n            int answer,\r\n            /*uint startedAt*/,\r\n            /*uint timeStamp*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = pricefeed.latestRoundData();\r\n        int256 currentPriceinusd=answer/100000000;\r\n        return currentPriceinusd;\r\n     }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}